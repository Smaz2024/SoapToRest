/**
 * This block applies the necessary Gradle plugins for the project.
 * - 'java': Provides tasks for compiling and testing Java source code.
 * - 'war': Adds support for creating a Web Application Archive (WAR) file for deployment.
 * - 'io.openliberty.tools.gradle.Liberty': Integrates Open Liberty, enabling tasks like
 *   'libertyDev' for live coding and server management directly from Gradle.
 * - 'com.diffplug.spotless': A powerful code formatter to ensure consistent style.
 */
plugins {
    id 'java'
    id 'war'
    id "io.openliberty.tools.gradle.Liberty" version "3.9.4"
    id 'com.diffplug.spotless' version '6.25.0'
}

// Basic project information.
group = 'com.example'
version = '1.0.0'
sourceCompatibility = '21'

// Specifies where Gradle should look for project dependencies.
// mavenCentral() is the primary public repository for Java libraries.
repositories {
    mavenCentral()
}

// Defines the project's dependencies, categorized by scope.
dependencies {
    // 'providedCompile' dependencies are required for compilation but are provided by the
    // target runtime (Open Liberty). They are NOT packaged into the WAR file.
    // This is standard for Jakarta EE and MicroProfile APIs.
    providedCompile 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    providedCompile 'org.eclipse.microprofile:microprofile:6.0'

    // 'implementation' dependencies are required by the application at runtime and will be
    // included in the WEB-INF/lib directory of the generated WAR file.
    implementation 'org.glassfish:jakarta.json:2.0.1'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'
    implementation 'com.fasterxml.woodstox:woodstox-core:6.5.1'
    implementation 'io.opentelemetry:opentelemetry-api:1.51.0'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    // This API is needed for the ManagedExecutorService.
    implementation 'jakarta.enterprise.concurrent:jakarta.enterprise.concurrent-api:3.0.4'

    // 'compileOnly' dependencies are needed only during compilation and are not included in the
    // final artifact. Lombok is a classic example, as it generates code at compile time.
    compileOnly 'org.projectlombok:lombok:1.18.32'
    // 'annotationProcessor' specifies a compile-time annotation processor.
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    // 'testImplementation' dependencies are used for compiling and running tests.
    // They are not included in the final WAR file.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.glassfish.jersey.core:jersey-common:3.1.3'
    testImplementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.3'
    // 'testRuntimeOnly' dependencies are required only for running tests, not compiling them.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

// Configure the test task to use JUnit 5
test {
    useJUnitPlatform()
}

// Customizes the generated WAR file.
war {
    archiveFileName = 'gateway.war'
}

// The 'ext' block defines extra properties for the project. The Open Liberty plugin
// uses these 'liberty.server.var.*' properties to configure the server.xml file at runtime.
// This allows for easy configuration of ports and context roots from the build script.
ext {
    liberty.server.var.'default.http.port' = '9080'
    liberty.server.var.'default.https.port' = '9443'
    liberty.server.var.'default.context.root' = '/gateway'
}

// Configures the Spotless plugin for automatic code formatting.
spotless {
    // When 'enforceCheck' is true, the build will fail if code is not formatted.
    // When false, 'spotlessApply' will just fix the formatting.
    enforceCheck = false // 'true' to fail build on format issues, 'false' to just apply
    java {
        // Specifies the style guide to use.
        googleJavaFormat('1.22.0')
        // Additional cleanup rules.
        removeUnusedImports()
        endWithNewline()
    }
}

// Defines task dependencies to enforce a workflow.
// This ensures that the 'spotlessApply' task runs before 'compileJava',
// guaranteeing that all code is formatted before it is compiled.
compileJava.dependsOn 'spotlessApply'

// This ensures that the 'libertyStop' task runs before 'clean'.
// It's good practice to stop the server before deleting build artifacts
// to prevent file locking issues, especially on Windows.
clean.dependsOn 'libertyStop'
